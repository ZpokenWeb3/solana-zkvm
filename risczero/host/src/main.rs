use std::io::Write;
use std::str::FromStr;

use risc0_zkvm::{default_prover, ExecutorEnv};

use clap::{App, Arg};
use log::info;
// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    CUSTOM_METHOD_ELF, CUSTOM_METHOD_ID
};
use solana_sdk::hash::Hash;
use solana_sdk::pubkey::Pubkey;
use solana_sdk::signature::Signature;
use solana_sdk::transaction::VersionedTransaction;
use svm_core::{rpc, simulate_solana};
use svm_core::rpc::Rpc;
use solana_simulator_types::result::SimulateSolanaRequest;

#[tokio::main]
async fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let options = App::new("simulate Solana")
        .arg(Arg::with_name("config_file")
            .long("config_file")
            .takes_value(true)
            .help("Path to the Solana CLI configuration file"))
        .arg(Arg::with_name("commitment")
            .long("commitment")
            .takes_value(true)
            .help("Commitment level (e.g., 'confirmed', 'processed')"))
        .arg(Arg::with_name("json_rpc_url")
                 .long("json_rpc_url")
                 .takes_value(true)
                 .help("URL of the Solana JSON RPC endpoint")
             // .default_value("http://localhost:8899"))
        )
        .arg(Arg::with_name("keypair")
            .long("keypair")
            .takes_value(true)
            .help("Path to the keypair file"))
        .arg(Arg::with_name("fee_payer")
            .long("fee_payer")
            .takes_value(true)
            .help("Path to the fee payer's keypair file"))
        .arg(Arg::with_name("solana_key_for_config")
            .long("solana_key_for_config")
            .takes_value(true)
            .help("Public key for Solana config"))
        .get_matches();
    let config = &rpc::config::create(&options).unwrap();
    let rpc = rpc::config::build_rpc(config).await.unwrap();
    let signature = Signature::from_str("65Y37hedxq2LTUpMYNURd9z6w9KuhwXr5ngQTxvz2PGLqCWs2Ey83KS3URaadwy6D3crjxzHiXvtbSeEmzic9Pon").unwrap();
    let transaction = rpc.get_transaction(&signature).await.unwrap().unwrap();

    let mut transactions: Vec<VersionedTransaction> = vec![];
    transactions.push(transaction);

    let request = SimulateSolanaRequest{
        compute_units: None,
        heap_size: None,
        account_limit: None,
        verify: Some(true),
        blockhash: Hash::from_str("9qYXJM9yUFa8qbgz3dkLp5ww5bK1HwjCYBXZkkNpyCbs").unwrap().to_bytes(),
        transactions,
        id: None,
    };
    let solana_simulator = simulate_solana::init_simulator(&rpc, request.clone()).await.unwrap();



    let env = ExecutorEnv::builder()
        .write(&request)
        .unwrap()
        .write(&solana_simulator)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover
        .prove(env, CUSTOM_METHOD_ELF)
        .unwrap();

    // extract the receipt.
    let receipt = prove_info.receipt;

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    let _output: u32 = receipt.journal.decode().unwrap();

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(CUSTOM_METHOD_ID)
        .unwrap();
}
