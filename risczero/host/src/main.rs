use std::{env, fs};
use std::fs::File;
use std::io::{BufReader, Read, Write};
use std::time::{SystemTime, UNIX_EPOCH};
use risc0_zkvm::{default_prover, ExecutorEnv};

// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    CUSTOM_METHOD_ELF, CUSTOM_METHOD_ID
};
use svm_core::solana_simulator::SolanaSimulator;

fn load_program(name: String) -> Vec<u8> {
    // Loading the program file
    let mut dir = env::current_dir().unwrap();
    dir.push("example-programs");
    let name = name.replace('-', "_");
    dir.push(name + "_program.so");
    println!("Dir: {:?}", dir.to_str());
    let mut file = File::open(dir.clone()).expect("file not found");
    let metadata = fs::metadata(dir).expect("Unable to read metadata");
    let mut buffer = vec![0; metadata.len() as usize];
    file.read_exact(&mut buffer).expect("Buffer overflow");
    buffer
}

fn load_versioned_tx_from_json(name: String) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
    let mut dir = env::current_dir().unwrap();
    dir.push("example-transactions");
    let name = name.replace('-', "_");
    dir.push(name + "_transaction.bin");
    let mut file = File::open(dir).unwrap();
    let mut read_bytes = Vec::new();
    file.read_to_end(&mut read_bytes).unwrap();
    Ok(read_bytes)
}



fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let tx = load_versioned_tx_from_json("hello-solana".to_string()).unwrap();
    let solana_simulator = SolanaSimulator::default();
    let env = ExecutorEnv::builder()
        .write(&tx)
        .unwrap()
        .write(&solana_simulator)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover
        .prove(env, CUSTOM_METHOD_ELF)
        .unwrap();

    // extract the receipt.
    let receipt = prove_info.receipt;

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    let _output: u32 = receipt.journal.decode().unwrap();

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(CUSTOM_METHOD_ID)
        .unwrap();
}
